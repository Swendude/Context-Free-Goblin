-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Grammar.Scalar exposing (Codecs, Id(..), Uuid(..), defaultCodecs, defineCodecs, unwrapCodecs, unwrapEncoder)

import Graphql.Codec exposing (Codec)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode
import Json.Decode as Decode exposing (Decoder)
import Json.Encode as Encode


type Id
    = Id String


type Uuid
    = Uuid String


defineCodecs :
    { codecId : Codec valueId
    , codecUuid : Codec valueUuid
    }
    -> Codecs valueId valueUuid
defineCodecs definitions =
    Codecs definitions


unwrapCodecs :
    Codecs valueId valueUuid
    ->
        { codecId : Codec valueId
        , codecUuid : Codec valueUuid
        }
unwrapCodecs (Codecs unwrappedCodecs) =
    unwrappedCodecs


unwrapEncoder getter (Codecs unwrappedCodecs) =
    (unwrappedCodecs |> getter |> .encoder) >> Graphql.Internal.Encode.fromJson


type Codecs valueId valueUuid
    = Codecs (RawCodecs valueId valueUuid)


type alias RawCodecs valueId valueUuid =
    { codecId : Codec valueId
    , codecUuid : Codec valueUuid
    }


defaultCodecs : RawCodecs Id Uuid
defaultCodecs =
    { codecId =
        { encoder = \(Id raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map Id
        }
    , codecUuid =
        { encoder = \(Uuid raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map Uuid
        }
    }
