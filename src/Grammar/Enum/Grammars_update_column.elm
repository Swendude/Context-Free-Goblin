-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Grammar.Enum.Grammars_update_column exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| update columns of table "grammars"

  - Desciption - column name
  - Grammar - column name
  - Id - column name
  - Name - column name
  - Parent - column name

-}
type Grammars_update_column
    = Desciption
    | Grammar
    | Id
    | Name
    | Parent


list : List Grammars_update_column
list =
    [ Desciption, Grammar, Id, Name, Parent ]


decoder : Decoder Grammars_update_column
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "desciption" ->
                        Decode.succeed Desciption

                    "grammar" ->
                        Decode.succeed Grammar

                    "id" ->
                        Decode.succeed Id

                    "name" ->
                        Decode.succeed Name

                    "parent" ->
                        Decode.succeed Parent

                    _ ->
                        Decode.fail ("Invalid Grammars_update_column type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representating the Enum to a string that the GraphQL server will recognize.
-}
toString : Grammars_update_column -> String
toString enum =
    case enum of
        Desciption ->
            "desciption"

        Grammar ->
            "grammar"

        Id ->
            "id"

        Name ->
            "name"

        Parent ->
            "parent"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe Grammars_update_column
fromString enumString =
    case enumString of
        "desciption" ->
            Just Desciption

        "grammar" ->
            Just Grammar

        "id" ->
            Just Id

        "name" ->
            Just Name

        "parent" ->
            Just Parent

        _ ->
            Nothing
